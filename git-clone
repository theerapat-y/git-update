#!/bin/bash
#
# git-clone script
# version 0.0.1
#

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
dt=$(date +%Y%m%d+%H%M%S)
LOGFILE=/tmp/git-clone_$dt.log
echo $LOGFILE
echo "$(date +%H:%M:%S) : [DEBUG] Starting git-clone" | tee -a $LOGFILE

TARGETDIR=$HOME/src/startsiden
USER=startsiden

declare v UPDATETO TARGETDIR USER

# getopts for Mac OS X without long options
set -- $(getopt vd:u: $*)
while [ $# -gt 0 ]
do
    case "$1" in
    (-v) v=1;;
    (-d) TARGETDIR="$2"; shift;;
    (-u) UPDATETO="$2"; shift;;
    (--) shift; break;;
    (-*) echo "$0: error - unrecognized option '$1'" 1>&2; exit 1;;
    (*)  break;;
    esac
    shift
done
# end getopts

[ -z "$UPDATETO" ] && UPDATETO=develop
[ -z "$TARGETDIR" ] && TARGETDIR=$HOME/src/startsiden
[ -z "$USER" ] && USER=startsiden

if [ -f $DIR/repo_list ]; then
    readarray REPO_LIST < $DIR/repo_list
    [ "$v" ] && echo "$(date +%H:%M:%S) : [DEBUG] File read => repo_list" | tee -a $LOGFILE
else
    [ "$v" ] && echo "$(date +%H:%M:%S) : [DEBUG] No file found" | tee -a $LOGFILE
    while true
    do
        read -p "-> list of repo not found, please enter file name : " file
        [ ! -f $file ] && continue
        readarray REPO_LIST < $file
        [ $? -ne 0 ] && echo 'Invalid file, please try again' && continue
        [ "$v" ] && echo "$(date +%H:%M:%S) : [DEBUG] File read => $file" | tee -a $LOGFILE
        break
    done
fi

[ "$v" ] && echo "$(date +%H:%M:%S) : [DEBUG] Option => verbose=$v target_dir=$TARGETDIR" | tee -a $LOGFILE

for REPO in ${REPO_LIST[@]}
do
    [ "$v" ] && echo "$(date +%H:%M:%S) : [DEBUG] $REPO => start cloning process..." | tee -a $LOGFILE
	cd $TARGETDIR
    [ "$v" ] && echo "$(date +%H:%M:%S) : [DEBUG] $REPO => clone to $TARGETDIR/$REPO" | tee -a $LOGFILE
	git clone -v "git@github.com:$USER/$REPO.git" "$TARGETDIR/$REPO" | tee -a $LOGFILE
    [ "$v" ] && echo "$(date +%H:%M:%S) : [DEBUG] $REPO => done, go to next repo..." | tee -a $LOGFILE
done

if [ "$UPDATETO" ]; then
    ./git-update -vb $UPDATETO
fi

echo "$(date +%H:%M:%S) : [DEBUG] Finished" | tee -a $LOGFILE
